""" File: G#_predict.py
Developer(s): <first-name>, <second-name>
Date: <date-you-submit>
---
Description: This is a prediction script that
encodes new Drug-Protein pairs and predicts a
continuous log-transformed binding affinity.
"""
import pandas as pd
import numpy as np
import pickle as pkl
from DeepPurpose.utils import *
# TODO: Include any other librariies you might need. 
#       Comment the version used (e.g. use 'pip freeze' command)

def _load_model(filename='G#_model.pkl'):
    """ _load_model
       Helper function that loads the trained model, unpickles it,
       and returns it to generate predictions.
       ---
       Input: <str> filename, the path to the trained model.
       Output: <model obj>, the deserialized model
    """
    # TODO: Change the default filename to your group id
    return pkl.load(open(filename, "rb"))

def encode_pairs(df_pairs):
    """ encode_pairs
        An input dataframe of drug SMILES and protein sequences
        is encoded into the numerical representation required by
        the <G#_model.pkl> model to generate predictions.
        ---
        Input: <pd.DataFrame> df_pairs, a dataframe with three columns,
               the first with heading "SMILES" containing the string
               representation of a drug molecule, the second with 
               heading "Target Sequence" containing the string 
               representation of a protein target, and  a third
               column "Label" with the float values of binding
               affinities.
        Output: <pd.DataFrame> df_encode, a dataframe with five columns; 
               the same "SMILES", "Target Sequence", & "Labels" in addition to 
               the encoded representations: "drug_encoding" and 
               "target_encoding".
    """
    df_encode = df_pairs.copy()
    # TODO: Implement the necessary encoding method here
    return df_encode


def predict_pairs(df_encode):
    """ predict_pairs
        For all pairs in a dataframe containing drug and target encodings,
        the pretrained model is used to generate a predicted binding afinity
        (float value) that is added as a column to the dataframe named "predicted".
        ---
        Input: <pd.DataFrame> df_encode, a five colunm dataframe with the columns
              "drug_encoding" and "target_encoding" that are processed and passed
              the trained model to generate predicted score.
        Output: <pd.DataFrame> df_results, a six column dataframe with the same five
              columns and a sixth named "predicted" containing the float value
              generated by the model for each input drug-target pair.
    """
    df_results = df_encode.copy()
    model = _load_model()
    # TODO: Implement any required processing to generate predictions with your model.
    #       For example, concatenate the representations if that is required by your
    #       model. Then generate a score for each pair in the dataframe (e.g. a loop).
    return df_results


# FIN: There shouldnt be anything outside of the methods, nor a main function.
#      Implement any additional methods as "helper" function, denoted by a 
#      leading underscore (e.g. _load_model).
